
import discord
import random
import asyncio
import os
import requests
from keras.models import load_model  
from PIL import Image, ImageOps
import numpy as np


from discord.ext import commands
intents = discord.Intents.default()
# Mengaktifkan hak istimewa message-reading
intents.message_content = True

bot = commands.Bot(command_prefix='$', intents=intents)


def detect_b(image_path):
  # Disable scientific notation for clarity
  np.set_printoptions(suppress=True)

  # Load the model
  model = load_model("keras_model.h5", compile=False)

  # Load the labels
  class_names = open("labels.txt", "r").readlines()

  # Create the array of the right shape to feed into the keras model
  # The 'length' or number of images you can put into the array is
  # determined by the first position in the shape tuple, in this case 1
  data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

  image = Image.open(image_path).convert("RGB")

  size = (224, 224)
  image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

  image_array = np.asarray(image)

  # Normalize the image
  normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

  # Load the image into the array
  data[0] = normalized_image_array
  # Predicts the model
  prediction = model.predict(data)
  index = np.argmax(prediction)
  class_name = class_names[index]
  confidence_score = prediction[0][index]

  # Print prediction and confidence score
  # print("Class:", class_name[2:], end="")
  # print("Confidence Score:", confidence_score)
  return class_name[2:-1], confidence_score

@bot.event
async def on_ready():
    print(f'We have logged in as {bot.user}')

@bot.command()
async def imagesd(ctx):
    for attachment in ctx.message.attachments:
        await ctx.send(f"Received attachment: {attachment.url}")
        filename = attachment.filename
        await ctx.send(f"Received attachment with filename: {filename}")
        await attachment.save("Saved images/"+filename)

        
        cat_x, prob = detect_b("Saved images/"+filename)

        #convert the keras first
        if prob > 0.5:
            if cat_x == "e2":
                await ctx.send("Definetly e2")

            elif cat_x == "SECR 323":
                await ctx.send("This is SECR 323")



        

@bot.command()
async def meme(ctx):
    img_name = random.choice(os.listdir("images"))
    with open(f'images/{img_name}', 'rb') as f:
            picture = discord.File(f)
   # Kita kemudian dapat mengirim file ini sebagai tolok ukur!
    await ctx.send(file=picture)

@bot.command()
async def animal_meme(ctx):
    mlg_name = random.choice(os.listdir("newer"))
    with open(f'newer/{mlg_name}', 'rb') as f:
            picture = discord.File(f)
   # Kita kemudian dapat mengirim file ini sebagai tolok ukur!
    await ctx.send(file=picture)



def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('duck')
async def duck(ctx):
    '''Setelah kita memanggil perintah bebek (duck), program akan memanggil fungsi get_duck_image_url'''
    image_url = get_duck_image_url()
    await ctx.send(image_url)


bot.run("DiscordbotIDHere")


